buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.5.RELEASE'
        jacksonKotlinVersion = '2.9.+'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}

configure(subprojects.findAll { it.name != 'performance-tests-gatling' }) {

    apply plugin: 'kotlin'
    apply plugin: 'groovy'
    apply plugin: 'kotlin-spring'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        jcenter()
        mavenCentral()
    }

    group = 'pl.braintelligence'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    dependencies {
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonKotlinVersion"
        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

project(':product-store') {
    apply plugin: 'idea'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
    }
}

project(':spring-boot-web') {
    apply plugin: 'idea'
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'

    }
}

project(':spring-boot-webflux') {
    apply plugin: 'idea'
    dependencies {
        implementation 'io.projectreactor:reactor-core'
        implementation 'org.springframework.boot:spring-boot-starter-webflux'

    }
}

project(':performance-tests-gatling') {
    apply plugin: 'scala'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'org.scala-lang:scala-library:2.12.8'
        compile 'io.gatling:gatling-app:2.3.0'
        compile 'io.gatling.highcharts:gatling-charts-highcharts:2.3.0'
    }

    task loadTest(type: JavaExec) {
        description = 'Run gatling tests'
        new File("${buildDir}/reports/gatling").mkdirs()

        systemProperties System.getProperties()

        classpath = sourceSets.test.runtimeClasspath + configurations.testCompile + configurations.compile

        main = "io.gatling.app.Gatling"
        args = ['-s', 'BootLoadSimulation',             // Simulation
                '-rf', "${buildDir}/reports/gatling"    // Results Folder
        ]
    }

}
